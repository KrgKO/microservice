{"version":3,"sources":["pages/home/index.js","Router.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","headers","Content-Type","getMessage","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","data","wrap","_context","prev","next","get","sent","abrupt","stop","this","apply","arguments","Home","state","message","nextProps","_this2","then","setState","react_default","createElement","Panel","bsStyle","Form","inline","style","marginTop","marginBottom","Button","id","onClick","onButtonClick","bind","Body","React","Component","connect","_ref2","pokemons","AppRouter","react_router_es","history","browserHistory","path","component","HomePage","combineReducers","sample","App","store","createStore","reducers","applyMiddleware","reduxThunk","es","Router","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAKMA,SAAWC,EAAMC,OAAO,CAC5BC,QAAS,CACPC,eAAgB,sBAIdC,EAAU,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACEjB,EAASkB,IAAI,uDADf,cACXL,EADWE,EAAAI,KAAAJ,EAAAK,OAAA,SAGVP,GAHU,wBAAAE,EAAAM,SAAAT,EAAAU,SAAH,yBAAAhB,EAAAiB,MAAAD,KAAAE,YAAA,GAQVC,6MACJC,MAAQ,CACNC,QAAS,6FAGeC,4CAIV,IAAAC,EAAAP,KACdjB,IACGyB,KAAK,SAAAjB,GACJgB,EAAKE,SAAS,CACZJ,QAASd,EAAKA,KAAKc,6CAMzB,OACEK,EAAAtB,EAAAuB,cAAA,WACED,EAAAtB,EAAAuB,cAACC,EAAA,EAAD,CAAOC,QAAQ,WACbH,EAAAtB,EAAAuB,cAACG,EAAA,EAAD,CAAMC,QAAM,EAACC,MAAO,CAAEC,UAAW,GAAIC,aAAc,KAMjDR,EAAAtB,EAAAuB,cAACQ,EAAA,EAAD,CAAQN,QAAQ,UAAUO,GAAG,YAAYC,QAASrB,KAAKsB,cAAcC,KAAKvB,OAA1E,iBAGJU,EAAAtB,EAAAuB,cAACC,EAAA,EAAD,CAAOC,QAAQ,WACbH,EAAAtB,EAAAuB,cAACC,EAAA,EAAMY,KAAP,KAAcxB,KAAKI,MAAMC,QAAUL,KAAKI,MAAMC,QAAU,aAhC/CoB,IAAMC,WA6CVC,cANS,SAAAC,GACtB,MAAO,CACLC,SAFsCD,EAAfC,WAMa,GAAzBF,CAA+BxB,GCvC/B2B,EArBG,WAChB,OACEpB,EAAAtB,EAAAuB,cAACoB,EAAA,EAAD,CAAQC,QAASC,KACbvB,EAAAtB,EAAAuB,cAACoB,EAAA,EAAD,CAAOG,KAAK,KACVxB,EAAAtB,EAAAuB,cAACoB,EAAA,EAAD,CAAYI,UAAWC,OCNlBC,cAAgB,CAC7BC,OAAQ,kBAAM,QCiBDC,2LAVX,IAAMC,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAExD,OACElC,EAAAtB,EAAAuB,cAACkC,EAAA,EAAD,CAAUL,MAAOA,GACf9B,EAAAtB,EAAAuB,cAACmC,EAAD,cANUpB,cCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAtB,EAAAuB,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.ed420d14.chunk.js","sourcesContent":["import React from 'react'\nimport { Panel, Form, FormGroup, Col, FormControl, Button, Well } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport axios from 'axios'\n\nconst instance = axios.create({\n  headers: {\n    'Content-Type': 'application/json',\n  }\n})\n\nconst getMessage = async () => {\n  const data = await instance.get('http://5bd1420cbded6100135c2ebd.mockapi.io/messages')\n  // const data = await instance.get('http://139.5.140.195:9000/')\n  return data\n}\n\n// import { getMessage } from '../actions'\n\nclass Home extends React.Component {\n  state = {\n    message: ''\n  }\n\n  componentWillReceiveProps(nextProps) {\n    \n  }\n\n  onButtonClick() {\n    getMessage()\n      .then(data => {\n        this.setState({\n          message: data.data.message\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <Panel bsStyle=\"primary\">\n          <Form inline style={{ marginTop: 10, marginBottom: 10 }}>\n            {/* <FormGroup controlId=\"txtSearch\">\n              <Col sm={5}>\n                <FormControl type=\"text\" placeholder=\"Search\" />\n              </Col>\n            </FormGroup> */}\n            <Button bsStyle=\"primary\" id=\"btnSearch\" onClick={this.onButtonClick.bind(this)}>Get Message</Button>\n          </Form>\n        </Panel>\n        <Panel bsStyle=\"primary\">\n          <Panel.Body>{ this.state.message ? this.state.message : '' }</Panel.Body>\n        </Panel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ pokemons }) => {\n  return {\n    pokemons\n  }\n}\n\nexport default connect(mapStateToProps, {  })(Home)","import React from 'react'\nimport { Router, Route, IndexRoute, browserHistory } from 'react-router'\nimport HomePage from './pages/home'\n\nconst AppRouter = () => {\n  return (\n    <Router history={browserHistory}>\n        <Route path=\"/\">\n          <IndexRoute component={HomePage} />\n          {/* <Route path=\"/screener\" component={ScreenerPage} />\n          <Route path=\"/quote\" component={QuotePage} />\n          <Route path=\"/gem\" component={GemPage} />\n          <Route path=\"/share_holders(/:type)\" component={GuruPage} />\n          <Route path=\"/port\" component={PortPage} />\n          <Route path=\"/report\" component={ReportPage} />\n          <Route path=\"/new_article\" component={AddArticlePage} />\n          <Route path=\"/article(/:id)\" component={ArticlePage} />\n          <Route path=\"/login_page\" component={LoginPage} />\n          <Route path=\"/index.html\" component={HomePage} /> */}\n          {/* <Route path=\"*\" component={HomePage} /> */}\n        </Route>\n      </Router>\n  )\n}\n\nexport default AppRouter\n","import { combineReducers } from 'redux'\n\nexport default combineReducers({\n  sample: () => null\n})","import React, { Component } from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport Router from './Router'\nimport reducers from './reducers'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const store = createStore(reducers, {}, applyMiddleware(reduxThunk))\n\n    return (\n      <Provider store={store}>\n        <Router />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}